{"version":3,"file":"static/js/402.0eac21d7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesItem/movies-item.module.css?e94d","components/MoviesItem/MoviesItem.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/pages/SingleMoviePage/single-movie-page.module.css?180a","pages/SingleMoviePage/SingleMoviePage.jsx","shared/api/movies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"movies-item_container__ueJLp\",\"text\":\"movies-item_text__LeoAJ\",\"img\":\"movies-item_img__UpqNI\",\"list\":\"movies-item_list__qGx7l\"};","import { nanoid } from 'nanoid'\nimport PropTypes from \"prop-types\";\nimport s from \"./movies-item.module.css\";\n\nconst MoviesItem = ({ item }) => {\n    const {\n        poster_path,\n        overview,\n        title,\n        vote_average,\n        release_date,\n        genres, } = item;\n    \n    const genresItem = genres.map(item => (\n        <li key={nanoid()}>{item.name}</li>\n    ));\n    const releaseDate = release_date.slice(0,4)\n    \n    return (\n        <div className={s.container}>\n            <img\n                className={s.img}\n                src={`https://image.tmdb.org/t/p/original${poster_path}`}\n                alt={title}\n                width=\"300\"\n                height=\"400\"\n            />\n            <div >\n                <h2>{`${title} (${releaseDate})`}</h2>\n            <p>\n              USER SCORE: <span className={s.text}>{vote_average * 10}%</span>\n            </p>\n            <p>\n              OVERVIEW: <span className={s.text}>{overview}</span>\n            </p>\n            <p>GENRES:</p>\n            <ul className={s.list}>\n                {genresItem}\n            </ul>\n            </div>\n        </div>\n    )\n}\n\nMoviesItem.defaultProps = {\n  item: [],\n};\n\nMoviesItem.propTypes = {\n    item: PropTypes.shape({\n        poster_path: PropTypes.string.isRequired,\n        overview: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        vote_average: PropTypes.number.isRequired,\n        release_date: PropTypes.string.isRequired,\n        genres: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.string.isRequired,\n        })\n        ),\n  }),\n};\n\nexport default MoviesItem;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"single-movie-page_container__3ywxG\",\"button\":\"single-movie-page_button__wRPwU\",\"item\":\"single-movie-page_item__g8h-x\",\"itemActive\":\"single-movie-page_itemActive__IQLl9 single-movie-page_item__g8h-x\"};","import { useState, useEffect } from \"react\";\nimport { useParams, useNavigate, NavLink, Outlet } from \"react-router-dom\";\nimport MoviesItem from '../../components/MoviesItem';\n\nimport { getMovieById } from '../../shared/api/movies';\nimport s from './single-movie-page.module.css';\n\nconst SingleMoviePage = () => {\n    \n    const [state, setState] = useState({\n        movie: {},\n        loading: false,\n        error: null,\n    });\n\n    const { movie, loading, error } = state;\n\n    const { id } = useParams();\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            setState(prevState => ({\n                ...prevState,\n                loading: true,\n            }))\n\n            try {\n                const movie = await getMovieById(id);\n                setState((prevState) => {\n          return { ...prevState, loading: false, movie: { ...movie } };\n        });\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: false,\n                    error,\n                \n                }))\n            }\n        }\n        if (id) {\n      fetchMovies()\n    }\n        \n    }, [id]);\n\n    const getActiveLink = ({isActive}) => {\n    return isActive ? s.itemActive : s.item;\n}\n\n    const goBack = () => navigate(-1);\n    const isMovie = Object.keys(movie).length > 0;\n    return (\n        <main>\n            <div className={s.container}>\n                {loading && <p>...Loading</p>}\n                {error && <p>Movie not found</p>}\n                {isMovie && <button className={s.button} onClick={goBack}>Go back</button>}\n                {movie?.id && <MoviesItem item={movie} />}\n                {isMovie && <NavLink className={getActiveLink} to={`cast`}>Cast</NavLink>}\n                {isMovie && <NavLink className={getActiveLink} to={`reviews`}>Reviews</NavLink>}\n                <Outlet />\n            </div>\n        </main>\n    );\n}\n\nexport default SingleMoviePage;","import axios from \"axios\";\n\n// const API_KEY = '3dd73bc5602d72433e8418bc312e6ea9';\n// const BASE_URL = `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`;\n\n// export const getMovies = async () => await axios.get(BASE_URL);\n\n// const API_KEY = '3dd73bc5602d72433e8418bc312e6ea9';\n// const instance = axios.create({\n//     baseURL: 'https://api.themoviedb.org/3',\n// });\n\n\n\n// export const getMovies = async (page) => {\n//     const { data: {results} } = await instance.get(\"trending/movie/day\", {\n//         params: {\n//             api_key: API_KEY,\n//             page\n//         }\n//     });\n//     return results;\n// } \n\n// export default getMovies;\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3/\",\n});\nconst APIkey = \"3dd73bc5602d72433e8418bc312e6ea9\";\n\nexport const getTrendingMovies = async (page = 1) => {\n  const {\n    data: { results },\n  } = await instance.get(\"trending/movie/day\", {\n    params: {\n      api_key: APIkey,\n      page,\n    },\n  });\n  return results;\n};\n\nexport const getMovieById = async (id) => {\n  const { data } = await instance.get(`movie/${id}`, {\n    params: {\n      api_key: APIkey,\n    },\n  });\n  return data;\n};\n\n// export const searchMovies = async (q) => {\n//   const {\n//     data: { results },\n//   } = await instance.get(\"search/movie\", {\n//     params: {\n//       api_key: APIkey,\n//       q\n//     },\n//   });\n//   return results;\n// };\n\nexport const searchMovies = async (query, page = 1) => {\n  const { data } = await instance.get(\"search/movie\", {\n    params: {\n      api_key: APIkey,\n      page,\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getMovieCredits = async (id) => {\n  const { data } = await instance.get(`movie/${id}/credits`, {\n    params: {\n      api_key: APIkey,\n    },\n  });\n  return data.cast;\n};\n\nexport const getMovieReviews = async (id) => {\n  const { data } = await instance.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: APIkey,\n    },\n  });\n  return data.results;\n};\n"],"names":["MoviesItem","item","poster_path","overview","title","vote_average","release_date","genresItem","genres","map","name","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","releaseDate","slice","className","s","src","alt","width","height","defaultProps","useState","movie","loading","error","state","setState","useParams","navigate","useNavigate","useEffect","fetchMovies","prevState","getMovieById","getActiveLink","isActive","isMovie","Object","keys","length","onClick","to","instance","axios","baseURL","APIkey","getTrendingMovies","page","get","params","api_key","results","data","searchMovies","query","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}