{"version":3,"file":"static/js/673.61054fc0.chunk.js","mappings":"yRAEMA,EAAe,SAAC,GAAe,IAE3BC,EAF0B,EAAZC,MAEGC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAE5CC,EAAaF,EAAY,yDACmBA,GAClDG,EAEJ,OACE,2BACE,gBACEC,IAAKF,EACLG,IAAKN,EACLO,MAAM,MACNC,OAAO,SAET,uBAAKR,KACL,uBAAIE,MARGH,MAaX,OACI,wBACKH,KAIbD,EAAac,aAAe,CAC1BZ,MAAO,IAcT,QCGA,EA5CiB,WACb,OAA0Ba,EAAAA,EAAAA,UAAS,CAC/Bb,MAAO,GACPc,SAAS,EACTC,MAAO,OAHX,eAAOC,EAAP,KAAcC,EAAd,KAKQf,GAAOgB,EAAAA,EAAAA,MAAPhB,IAERiB,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,2FAChBH,GAAS,SAAAI,GAAS,yBACXA,GADW,IAEdP,SAAS,OAHG,mBAMOQ,EAAAA,EAAAA,IAAgBpB,GANvB,OAMNqB,EANM,OAOZN,GAAS,SAAAI,GAAS,yBACXA,GADW,IAEdrB,MAAOuB,EACPT,SAAS,OAVD,gDAaZG,GAAS,SAAAI,GAAS,yBACXA,GADW,IAEdP,SAAS,EACTC,MAAK,UAhBG,yDAAH,qDAoBbb,GACNkB,MAEC,CAAClB,IACF,IAAQF,EAA0BgB,EAA1BhB,MAAOe,EAAmBC,EAAnBD,MAAOD,EAAYE,EAAZF,QAE1B,OACE,2BACGA,IAAW,sCACXC,IAAS,6CACR,SAAC,EAAD,CAAcf,MAAOA,S,iMCzCvBwB,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,kCAELC,EAAU,mCAEHC,EAAiB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SAGrBL,EAASM,IAAI,qBAAsB,CAC3CC,OAAQ,CACNC,QAASL,EACTE,KAAAA,KAN2B,uBAErBI,EAFqB,EAE7BV,KAAQU,QAFqB,kBASxBA,GATwB,2CAAH,qDAYjBC,EAAY,mCAAG,WAAOhC,GAAP,yFACHsB,EAASM,IAAT,gBAAsB5B,GAAM,CACjD6B,OAAQ,CACNC,QAASL,KAHa,uBAClBJ,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZY,EAAY,mCAAG,WAAOC,GAAP,8FAAcP,EAAd,+BAAqB,EAArB,SACHL,EAASM,IAAI,eAAgB,CAClDC,OAAQ,CACNC,QAASL,EACTE,KAAAA,EACAO,MAAAA,KALsB,uBAClBb,EADkB,EAClBA,KADkB,kBAQnBA,GARmB,2CAAH,sDAWZD,EAAe,mCAAG,WAAOpB,GAAP,yFACNsB,EAASM,IAAT,gBAAsB5B,EAAtB,YAAoC,CACzD6B,OAAQ,CACNC,QAASL,KAHgB,uBACrBJ,EADqB,EACrBA,KADqB,kBAMtBA,EAAKc,MANiB,2CAAH,sDASfC,EAAe,mCAAG,WAAOpC,GAAP,yFACNsB,EAASM,IAAT,gBAAsB5B,EAAtB,YAAoC,CACzD6B,OAAQ,CACNC,QAASL,KAHgB,uBACrBJ,EADqB,EACrBA,KADqB,kBAMtBA,EAAKU,SANiB,2CAAH,uD","sources":["pages/CastPage/CastPageItem/CastPageItem.jsx","pages/CastPage/CastPage.jsx","shared/api/movies.js"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport img from '../../../images/img.png';\nconst CastPageItem = ({ items }) => {\n\n    const elements = items.map(({ id, name, profile_path, character }) => {\n\n        const profileImg = profile_path\n      ? `https://image.tmdb.org/t/p/w600_and_h900_bestv2${profile_path}`\n      : img;\n\n    return (\n      <li key={id} >\n        <img\n          src={profileImg}\n          alt={name}\n          width=\"200\"\n          height=\"300\"\n        />\n        <p >{name}</p>\n        <p>{character}</p>\n      </li>\n    );\n  });\n    \n    return (\n        <ul>\n            {elements}\n        </ul>)\n}\n\nCastPageItem.defaultProps = {\n  items: [],\n};\n\nCastPageItem.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n            profile_path: PropTypes.string.isRequired,\n            character: PropTypes.string.isRequired,\n        })\n    )\n};\n\nexport default CastPageItem;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCredits } from \"shared/api/movies\";\nimport  CastPageItem  from './CastPageItem';\nconst CastPage = () => {\n    const [state, setState] = useState({\n        items: [],\n        loading: false,\n        error: null,\n    })\n    const { id } = useParams();\n    \n    useEffect(() => {\n        const fetchMovies = async () => {\n            setState(prevState => ({\n                ...prevState,\n                loading: true,\n            }));\n            try {\n                const data = await getMovieCredits(id);\n                setState(prevState => ({\n                    ...prevState,\n                    items: data,\n                    loading: false,\n                }))\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: false,\n                    error,\n                }))\n            }\n        }\n        if (id) {\n      fetchMovies();\n    }\n    }, [id]);\n      const { items, error, loading } = state;\n\n  return (\n    <div>\n      {loading && <p>...Loading</p>}\n      {error && <p>Movies not found</p>}\n      { <CastPageItem items={items}/>}\n    </div>\n  );\n}\n\nexport default CastPage;","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3/\",\n});\nconst API_KEY = \"3dd73bc5602d72433e8418bc312e6ea9\";\n\nexport const getTrendingMovies = async (page = 1) => {\n  const {\n    data: { results },\n  } = await instance.get(\"trending/movie/day\", {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n  return results;\n};\n\nexport const getMovieById = async (id) => {\n  const { data } = await instance.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const searchMovies = async (query, page = 1) => {\n  const { data } = await instance.get(\"search/movie\", {\n    params: {\n      api_key: API_KEY,\n      page,\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getMovieCredits = async (id) => {\n  const { data } = await instance.get(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data.cast;\n};\n\nexport const getMovieReviews = async (id) => {\n  const { data } = await instance.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data.results;\n};\n"],"names":["CastPageItem","elements","items","map","id","name","profile_path","character","profileImg","img","src","alt","width","height","defaultProps","useState","loading","error","state","setState","useParams","useEffect","fetchMovies","prevState","getMovieCredits","data","instance","axios","baseURL","API_KEY","getTrendingMovies","page","get","params","api_key","results","getMovieById","searchMovies","query","cast","getMovieReviews"],"sourceRoot":""}